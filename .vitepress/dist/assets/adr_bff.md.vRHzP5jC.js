import{_ as e,c as a,o as s,a3 as t}from"./chunks/framework.Bsyxd66g.js";const g=JSON.parse('{"title":"100 Backend for Frontend (BFF)","description":"","frontmatter":{},"headers":[],"relativePath":"adr/bff.md","filePath":"adr/bff.md"}'),i={name:"adr/bff.md"},n=t(`<h1 id="_100-backend-for-frontend-bff" tabindex="-1">100 Backend for Frontend (BFF) <a class="header-anchor" href="#_100-backend-for-frontend-bff" aria-label="Permalink to &quot;100 Backend for Frontend (BFF)&quot;">​</a></h1><p>We will prefer the BFF pattern for developing and delivering our application.</p><h2 id="choosing-against-universal-api-gateway" tabindex="-1">Choosing Against: Universal API Gateway <a class="header-anchor" href="#choosing-against-universal-api-gateway" aria-label="Permalink to &quot;Choosing Against: Universal API Gateway&quot;">​</a></h2><p>The popularization of the &quot;Single Page Application&quot; model (SPA) over a decade ago brought along with it some architectural ideas that were current at the time that have proven to be less than ideal.</p><p>Large companies were enamored with the idea of a view of Service Oriented Architecture (SOA) where the companies IT infrastructure would be provided by a sort of &quot;back plane&quot; of generally reusable services, usually going by some name like the &quot;Universal API Gateway&quot;.</p><p>For Angular applications (and other services and apps), the idea was that they would aggregate together various services culled from the &quot;catalog&quot; to create novel uses of the services.</p><p>The stressors of this approach include:</p><ul><li>&quot;Universal&quot; doesn&#39;t work. At a even moderate scale, this means that your particular application is consuming API resources that are irrelevant to your concerns. You end up doing a lot of filtering, modifying, and digging into representations from APIs.</li><li>&quot;Universal&quot; means that often your frontend team would have to become customers to APIs you don&#39;t own, and special endpoints would have to be created on those APIs to support your application, introducing <em>coupling</em>.</li><li>Security was supposed to be implemented primarily using OAuth2 tokens, which meant security information was vomited across service boundaries. The presence of security tokens, even in the form of JWTs, in the browser, is a known issue. It is also easy to leak data (See <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/" target="_blank" rel="noreferrer">Broken Access Control</a>) since &quot;universal&quot; meant a particular API might share information that is confidential internally, but when exposed externally should be elided or filtered out.</li><li>Complexity Creep: The user-interface code is the worst place to try to implement and orchestrate many <em>application layer</em> requirements, especially when working with disparate data sources asynchronously. In some SOA environments, it isn&#39;t uncommon to have to call <em>many</em> services to get pieces of data you need to accomplish one side-effect. Race conditions and failures are common.</li></ul><p>One reason for the initial popularity of this approach was <em>specialization</em>. The &quot;dream&quot; was that you would have teams of developers (frontend) that could focus exclusively on the domain of UI/UX, while other &quot;backend&quot; developers would handle the complexities of the server-side. This largely fails because this means that changes on the frontend require coordination with the backend team, including (and perhaps most importantly) in terms of deployment.</p><p>In reality, the &quot;loose coupling&quot; that was aimed for between frontend and backend teams never happened. Changes on either side are rarely orthogonal.</p><h2 id="choice-backend-for-frontend" tabindex="-1">Choice: Backend for Frontend <a class="header-anchor" href="#choice-backend-for-frontend" aria-label="Permalink to &quot;Choice: Backend for Frontend&quot;">​</a></h2><p>In recent years there has been a rush to regain what we had before the SPA era - in the time of &quot;Web Applications&quot;. This is seen in newer approaches in frontend frameworks like Angular&#39;s Server-Side Rendering, React&#39;s Server Component Model, and tools like Next.JS, and Nuxt, from Vercel.</p><p>These approaches are at least in part motivated by the factors above.</p><p>In the BFF pattern, a single team owns and delivers both the frontend (in our case, and Angular application), and the web application (API) that primarily supports and delivers that application.</p><p>Unlike the old SPA model, where the application would be compiled and delivered from a static server (usually NGINX) at a separate origin from the requisite APIs it uses, with a BFF there is a single deliverable.</p><h3 id="backend-asp-net-core-8" tabindex="-1">Backend - ASP.NET Core 8 <a class="header-anchor" href="#backend-asp-net-core-8" aria-label="Permalink to &quot;Backend - ASP.NET Core 8&quot;">​</a></h3><p>We will use an ASP.NET Core 8 Minimal API project for the backend.</p><p>During production, the frontend will be served from the <code>wwwroot/browser</code> directory.</p><p>It will use HTTPS to help us detect any issues we would have when moving from HTTP to HTTPS.</p><h4 id="reverse-proxy-yarp" tabindex="-1">Reverse Proxy (YARP) <a class="header-anchor" href="#reverse-proxy-yarp" aria-label="Permalink to &quot;Reverse Proxy (YARP)&quot;">​</a></h4><p>We&#39;ll use the <a href="https://www.nuget.org/packages/Yarp.ReverseProxy" target="_blank" rel="noreferrer"><code>Yarp.ReverseProxy</code></a> package for two purposes:</p><ol><li>During development, it will be used to proxy to the Angular dev server (at <a href="http://localhost:4200" target="_blank" rel="noreferrer">http://localhost:4200</a>).</li><li>We will also use it to proxy calls to other services, if needed.</li></ol><p>The <code>appsettings.development.json</code> file to proxy to the Angular application:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ReverseProxy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Routes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;ng&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;ClusterId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ng-serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;Match&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;Path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{**catchall}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Clusters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;ng-serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;Destinations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;ng-serve/dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;Address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4200&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div>`,24),o=[n];function r(l,h,p,d,c,u){return s(),a("div",null,o)}const f=e(i,[["render",r]]);export{g as __pageData,f as default};
